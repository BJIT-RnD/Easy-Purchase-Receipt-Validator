/**
 File Name: ASN1ObjectTest.swift
 
 Description: This file contains the implementation of the `ASN1ObjectTest` class, which is responsible for testing `ASN1Object` class.
 
 Author: Md. Rejaul Hasan
 
 Â© 2023 BJIT. All rights reserved.
 */

import XCTest
@testable import Easy_Purchase_Receipt_Validator

final class ASN1ObjectTest: XCTestCase {
    private var sut: ASN1Object!
    override func setUp() {
        super.setUp()
    }
    
    override func tearDown() {
        self.sut = nil
        super.tearDown()
    }
    
    func test_childASN1Object_Given_ValidIndex_Expect_ASN1Object() {
        self.initialSetup(with: [0x30, 0x20, 0x02, 0x01, 0x2A, 0x0C, 0x0D, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x01, 0x01, 0xFF, 0x06, 0x09, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1])
        XCTAssertNotNil(sut.childASN1Object(at: 2))
    }
    
    func test_childASN1Object_Given_InvalidIndex_Expect_Nill() {
        self.initialSetup(with: [0x0C, 0x0D, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21 ])
        XCTAssertNil(sut.childASN1Object(at: 2))
    }
    
    
    // MARK: - numberOfChilds. Remain corrupted ASN1Object
    func test_numberOfChilds_Given_ASN1ObjectWith4Child_Expect_4_Child() {
        self.initialSetup(with: [0x30, 0x20, 0x02, 0x01, 0x2A, 0x0C, 0x0D, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x01, 0x01, 0xFF, 0x06, 0x09, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1])
        let child = sut.numberOfChilds()
        XCTAssertEqual(child, 4, "Expect 4 child but get \(child) child.")
    }
    
    func test_numberOfChilds_Given_ASN1ObjectWith0Child_Expect_0_Child() {
        self.initialSetup(with: [0x0C, 0x0D, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21 ])
        let child = sut.numberOfChilds()
        XCTAssertEqual(child, 0, "Expect 0 child but get \(child) child.")
    }
    
    // MARK: - findASN1Object
    func test_findASN1Object_Given_OIDWhichIsAvailable_Expect_ASN1Object() {
        self.initialSetup(with: [0x30, 0x20, 0x02, 0x01, 0x2A, 0x0C, 0x0D, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x01, 0x01, 0xFF, 0x06, 0x09, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1])
        let findASN1ObjectOf_sha256 = self.sut.findASN1Object(of: OID.sha256)
        XCTAssertNotNil(findASN1ObjectOf_sha256, "Expect not to be nil")
        XCTAssertEqual(findASN1ObjectOf_sha256?.value as? String, OID.sha256.rawValue, "Expect OID_sha256")
    }
    
    func test_findASN1Object_Given_OIDWhichNotAvailable_Expect_Nill() {
        self.initialSetup(with: [0x30, 0x20, 0x02, 0x01, 0x2A, 0x0C, 0x0D, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x01, 0x01, 0xFF, 0x06, 0x09, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1])
        let findASN1ObjectOf_certificateExtension = self.sut.findASN1Object(of: OID.certificateExtension)
        XCTAssertNil(findASN1ObjectOf_certificateExtension, "Expect to be nil")
    }
}

/**
 0x30 0x1D         ; Sequence, 29 bytes in length
    0x02 0x01 0x2A   ; Integer with value 42
    0x0C, 0x0D, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21 ; UTF8String, "Hello, World!"
    0x01 0x01 0xFF   ; Boolean (TRUE)
    0x06, 0x09, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1, OID (sha256 = "2.16.840.1.101.3.4.2.1")
 */
extension ASN1ObjectTest{
    func initialSetup(with data: [UInt8]) {
        let decoder = ASN1Decoder()
        let data = Data(data)
        do {
            let asn1ObjectList = try decoder.decode(data: data)
            self.sut = asn1ObjectList.first
        }catch _ {}
    }
}
